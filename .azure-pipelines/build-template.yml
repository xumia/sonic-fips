# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
  - name: pool
    type: object
    default:
      vmImage: ubuntu-20.04
  - name: arch
    type: string
    default: amd64

jobs:
- job:
  displayName: Build-${{ parameters.arch }}
  timeoutInMinutes: 600
  pool: ${{ parameters.pool }}
  container:
    image: publicmirror.azurecr.io/debian:bookworm
    options:  "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
  steps:
  - script: |
      /tmp/docker exec -t -u 0 ci-container \
      sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
    displayName: 'Install Sudo in container'
  - script: |
      sudo rm -rf $(ls -A1)
    displayName: 'Clean Workspace'
  - script: |
      set -x
      sudo mkdir -p $HOME
      sudo chown $USER $HOME
      sudo apt-get update
      sudo apt-get install -y git python3-pip
      sudo apt-get install -y cmake git make build-essential quilt debhelper bc python3 python3-pip sudo libssl-dev libgcc-12-dev
      sudo apt-get install -y clang
      sudo apt-get install -y openssl libssl-dev libssl3
      sudo apt-get install -y dh-exec dh-runit libaudit-dev libedit-dev libfido2-dev libgtk-3-dev libkrb5-dev
      sudo apt-get install -y libwrap0-dev pkg-config
      sudo apt-get install -y libpam-dev libselinux1-dev libsystemd-dev libwrap0-dev

      # Build Golang
      sudo apt-get install -y golang
 
      # Build Python
      sudo apt-get install -y lsb-release sharutils libreadline-dev libncursesw5-dev  libbz2-dev liblzma-dev libgdbm-dev libdb-dev tk-dev blt-dev  libexpat1-dev libbluetooth-dev locales-all libsqlite3-dev media-types
      sudo apt-get install -y time net-tools xvfb systemtap-sdt-dev python3-sphinx python3-docs-theme texinfo

      # Build krb5
      sudo apt-get install -y ss-dev libldap2-dev libc6-dev libkeyutils-dev byacc docbook-to-man libsasl2-dev libverto-dev python3-cheetah python3-lxml doxygen doxygen-latex tex-gyre

      sudo pip3 install --break-system-packages blurb

      mkdir -p $(Pipeline.Workspace)/target
    displayName: 'Install packages'
  - checkout: self
    submodules: true
  - script: |
      cd src/SymCrypt
      git submodule update --init -- 3rdparty/jitterentropy-library
    displayName: 'Checkout Symcrypt submodules'
  - script: |
      set -ex
      ARCH=${{ parameters.arch }} make openssl
      sudo dpkg -i target/libssl*.deb target/openssl*.deb
      sudo dpkg -i target/symcrypt-openssl*.deb
      openssl list --providers
    displayName: 'Build and install openssl'
  - script: |
      set -ex
      sudo mkdir -p $HOME
      sudo pip3 install --break-system-packages -r src/SymCrypt/scripts/requirements.txt
      ARCH=${{ parameters.arch }} make symcrypt
      sudo dpkg -i target/symcrypt-openssl*.deb
      openssl list --providers
      openssl list --providers | grep -i symcrypt
    displayName: 'Build and install symcrypt'
  - script: |
      set -ex
      ARCH=${{ parameters.arch }} make openssl
      sudo dpkg -i target/libssl*.deb target/openssl*.deb
      sudo dpkg -i target/symcrypt-openssl*.deb
      openssl list --providers
      openssl list --providers | grep -i symcrypt
    condition: false
    displayName: 'Build and install openssl'
  - script: |
      set -ex
      sudo mkdir -p /etc/fips
      echo 1 | sudo tee /etc/fips/fips_enable
      openssl engine -v | grep -i symcrypt
      pushd src/openssl
      git clean -xdf
      git checkout -- .
      popd

      ARCH=${{ parameters.arch }} TARGET_PATH=target-test make openssl
      echo 0 | sudo tee /etc/fips/fips_enable
    condition: false
    displayName: 'Test openssl with fips enabled'
 
  - script: |
      ARCH=${{ parameters.arch }} make all
    displayName: 'Build others'
  - publish: $(System.DefaultWorkingDirectory)/target
    artifact: fips-symcrypt-${{ parameters.arch }}
    displayName: "Archive packages"
  - publish:  $(Build.ArtifactStagingDirectory)
    condition: failed()
    artifact: '$fips-symcrypt-${{ parameters.arch }}-(System.JobAttempt)'
    displayName: "Archive failed packages"
